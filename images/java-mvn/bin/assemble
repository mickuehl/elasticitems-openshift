#!/bin/bash


. $(dirname $0)/functions

HOME=/opt/app-root
LOCAL_SOURCE_DIR=/tmp/src
MAVEN_HOME=/usr/local/maven
DEPLOY_DIR=/opt/app-root

echo "---> Configure sources ..."

# src provides its own mvn configuration
if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."

  if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ]; then
    mkdir -p $HOME/.m2
    mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
  fi

  # We move the rest of the configuration, if provided to the place where the app will run
  cp -v $LOCAL_SOURCE_DIR/configuration/* $DEPLOY_DIR
fi

configure_proxy
configure_mirrors
configure_nexus

echo "---> Building sources ..."

# If a pom.xml is present, this is a normal build scenario so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then

  pushd $LOCAL_SOURCE_DIR &> /dev/null

  # the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
  # artifacts (*.war, *.jar)
  ARTIFACT_DIR=${ARTIFACT_DIR:-target}

  PROFILE=""
  if [ -n "$MAVEN_PROFILE" ]; then
    PROFILE="--activate-profiles=${MAVEN_PROFILE}"
  fi

  # Always force IPv4 (CLOUD-188)
  # Append user-supplied arguments (CLOUD-412)
  MAVEN_ARGS="$MAVEN_GOALS $MAVEN_ARGS ${PROFILE} -Djava.net.preferIPv4Stack=true ${MAVEN_ARGS_APPEND}"

  echo "[INFO] Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  # Execute the actual build
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "[ERROR] Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  echo "---> Moving binaries ..."

  cp -rfv $LOCAL_SOURCE_DIR/$ARTIFACT_DIR/${ARTIFACT_NAME}.war $DEPLOY_DIR/app.war 2> /dev/null
  echo "[INFO] Application war file is located in ${DEPLOY_DIR}/app.war"

  popd &> /dev/null

else
  echo "[ERROR] No pom.xml file found in '$LOCAL_SOURCE_DIR'"
  exit 1
fi

# Success
exit 0